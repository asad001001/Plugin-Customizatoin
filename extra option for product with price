<?php 
// add note before add to cart button //

add_action( 'woocommerce_before_add_to_cart_button', 'gj_custom_before_add_to_cart_btn' );

function gj_custom_before_add_to_cart_btn(){
	echo '<p class="gj_before_cart_note"><strong>As of 11/01/2022 Mattresses and Box springs are a banned waste item and no longer allowed in the dumpsters -$100-150 CHARGE WILL APPLY TO EACH UNIT</strong></p>';
}





add_action('woocommerce_before_add_to_cart_button', 'add_custom_checkbox_to_product');

function add_custom_checkbox_to_product() {
    echo '<div class="custom-checkbox-field">';
    woocommerce_form_field(
        'add_loading_price', 
        array(
            'type'  => 'checkbox',
            'class' => array('custom-checkbox-class form-row-wide'),
            'label' => __('<span class="loadp">ADD $300 PER LOAD FOR ANY LOAD CONTAINING PAINTED MATERIAL</span>', 'woocommerce'),
        )
        );
    echo '</div>';
}

add_filter('woocommerce_add_cart_item_data', 'save_checkbox_to_cart_item', 10, 2);

function save_checkbox_to_cart_item($cart_item_data, $product_id) {
    if (isset($_POST['add_loading_price'])) {
        $cart_item_data['add_loading_price'] = true;
        $cart_item_data['unique_key'] = md5(microtime().rand()); // Ensure unique cart item key
    }
    
    if ( isset($_POST['variation_id']) ) {
        
            $variation_id = $_POST['variation_id'];
            //  $variation_id = $cart_item['variation_id'];
            $variation = new WC_Product_Variation( $variation_id );
        
            $variation_name = strtolower($variation->get_name());
            
            if( str_contains( $variation_name, 'trash' ) !== true ){
                
                $cart_item_data['env_fuel'] = true;

                
            }
        }
        
    return $cart_item_data;
}

add_filter('woocommerce_get_item_data', 'display_checkbox_in_cart', 10, 2);

function display_checkbox_in_cart($item_data, $cart_item) {
    
    if (isset($cart_item['add_loading_price'])) {
        $item_data[] = array(
            'key'   => __('Per Load', 'woocommerce'),
            'value' => __('$300', 'woocommerce'),
        );
    }
    
     if ( isset($cart_item['env_fuel']) ) {
         
         $painted_price = ((isset($cart_item['add_loading_price']))? 300 : 0);
         
               $variation_id = $cart_item['variation_id'];
        $variation = new WC_Product_Variation( $variation_id );
        $variation_name = $variation->get_name();
        
    if(str_contains( $variation_name, 'trash' ) !== true){
        
        $item_data[] = array(
            'name' => 'ENV Fee',
            'value' => 25,
        );
        
        $item_data[] = array(
            'name' => 'Fuel Charges',
            'value' => 0.08 * ($variation->get_regular_price() + 25 + $painted_price),
            );
        }

        
    }
    
    return $item_data;
}



// quantiy option will add as per quantiy 

add_action('woocommerce_before_calculate_totals', 'update_cart_item_price');

function update_cart_item_price($cart) {
   
  	if ( is_admin() && ! defined( 'DOING_AJAX' ) ) {
		return;
	}
	 if ( did_action( 'woocommerce_before_calculate_totals' ) >= 2 )
    return;


       // Define the extra fees
    $fixed_fee = 25;
    $percentage_fee_rate = 0.08;
    
    foreach ($cart->get_cart() as $cart_item) {
        
        if (isset($cart_item['add_loading_price']) && $cart_item['add_loading_price'] === true) {
            $original_price = $cart_item['data']->get_price();
            // echo "dd";
            $cart_item['data']->set_price($original_price + 300);
        }
        
         $variation_id = $cart_item['variation_id'];
        $variation = new WC_Product_Variation( $variation_id );
        $variation_name = $variation->get_name();
   
        // Check if the variation name contains 'trash'
        if ( $cart_item['env_fuel'] === true) {
            // Calculate the percentage fee
            $product_price = $cart_item['data']->get_price() + $fixed_fee;
            
            $percentage_fee = $product_price * $percentage_fee_rate;

            // Calculate the new price
            $new_price = $product_price  + $percentage_fee;

            // Set the new price
            $cart_item['data']->set_price( $new_price );

            // Store the fees for later use
            $cart_item['env_fuel'] = array(
                
                'env' => $fixed_fee,
                'fuel' => $percentage_fee,
            );
        }
        
    }
    
  


    
}


add_action('woocommerce_checkout_create_order_line_item', 'add_custom_data_to_order_items', 10, 4);

function add_custom_data_to_order_items($item, $cart_item_key, $values, $order) {
    if (isset($values['add_loading_price'])) {
        $item->add_meta_data(__('Painted Material additional price per load', 'woocommerce'), __('$300', 'woocommerce'), true);
    }
    
     if ( isset($values['env_fuel']) ) {
         
        $item->add_meta_data('ENV Fee', wc_price($values['env_fuel']['env']));
        $item->add_meta_data('Fuel Charges', wc_price($values['env_fuel']['fuel']));
    }
}

add_filter('woocommerce_email_order_meta_fields', 'display_custom_data_in_emails', 10, 3);

function display_custom_data_in_emails($fields, $sent_to_admin, $order) {
    foreach ($order->get_items() as $item_id => $item) {
        if ($item->get_meta('Custom Price')) {
            $fields['custom_price'] = array(
                'label' => __('Painted Material additional price per load', 'woocommerce'),
                'value' => __('$300', 'woocommerce')
        
            );
        }
    }
    return $fields;
}
